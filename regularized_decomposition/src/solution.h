/*------------------------------------------------------------------------------
MODULE TYPE:		Linear optimization supporting header
PROJECT CODE:		Simplex.
PROJECT FULL NAME:	Advanced implementation of revised simplex method
					for large scale linear problems.

MODULE AUTHOR:		Artur Swietanowski.

PROJECT SUPERVISOR:	prof. Andrzej P. Wierzbicki

--------------------------------------------------------------------------------

HEADER FILE NAME:	solution.h
CREATED:			1995.03.03
LAST MODIFIED:		1996.06.21

DEPENDENCIES:		stdtype.h, smartptr.h, compile.h
					<stdio.h>

--------------------------------------------------------------------------------

HEADER CONTENTS:
	The header contains a declaration of a structure used for holding a linear
program solution, possibly generated by a simplex optimizaer.

------------------------------------------------------------------------------*/

#ifndef __SOLUTION_H__
#define __SOLUTION_H__

#include <stdio.h>


#ifndef __COMPILE_H__
#	include "compile.h"
#endif

#ifdef SUPPORT_LP_DIT
#	include "lp_dit.h"
#endif

#ifndef __SMARTPTR_H__
#	include "smartptr.h"
#endif
#ifndef __STDTYPE_H__
#	include "stdtype.h"
#endif


//==============================================================================
//
//	Class "Solution" declaration.
//

class Solution
{
public:
	enum SolutionMask {
		Empty	= 0,
		Primal	= 0x01,
		Dual	= 0x02,
		RC		= 0x04,
		RowAct	= 0x08,
		Slack	= 0x10,
		Res		= 0x20,

		PD		= Primal | Dual | RC | Res | RowAct,
		All		= PD | RowAct | Slack
		};

	enum SolutionStatus {
		Unknown	= 0,
		Optimal,
		Unbounded,
		Infeasible,
		Unsolved
	};

protected:
	Int_T m, n;			// Constraint matrix dimensions.
	Int_T maxN, maxM;
	int contents;
	SolutionStatus status;

public:
	Array<Real_T> x,	// The primal variables	(array of "n" elements).
		y,				// The dual variables	(array of "m" elements).
		z,				// The reduced costs	(array of "n" elements).
		ra,				// Row activity			(array of "m" elements).
		s;				// Slack activity		(array of "m" elements).
	Real_T result;		// The objective function value.

public:
	Solution( Int_T mm = 0, Int_T nn = 0, int cntnts = Empty );
	virtual ~Solution( void );

	virtual void FreeSpace( void );

	void SetContents( Int_T mm = 0, Int_T nn = 0, int cntnts = Empty );
	void SetStatus( SolutionStatus st );

	Int_T GetN( void ) const;
	Int_T GetM( void ) const;
	Int_T GetAllocN( void ) const;
	Int_T GetAllocM( void ) const;
	virtual void SetN( Int_T nn );
	virtual void SetM( Int_T mm );
	void IncrementN( void );
	void IncrementM( void );

	int GetContents( void ) const;
	SolutionStatus GetStatus( void ) const;

	void WriteText( const char *fname, int cntnts = Empty ) const;
	virtual void WriteText( FILE *fp, int cntnts ) const;
	void ReadText( const char *fname, int cntnts = Empty );
	virtual void ReadText( FILE *fp, int cntnts );

/*#ifdef SUPPORT_LP_DIT
public:
	virtual void ReadDIT( const char *fname );
	virtual void WriteDIT( const char *fname );

	void lpi_res( LP_SOLUTION *s );
	void lpo_res( LP_SOLUTION *s );
#endif */
};

//
//	End of class "Solution" declaration.
//
//==============================================================================


inline
Solution::Solution( Int_T mm, Int_T nn, int cntnts )
	: m( 0 ), n( 0 ), maxN( 0 ), maxM( 0 ), contents( Empty ),
	status( Unknown ), x(), y(), z(), ra(), s(), result( 0.0 )
{ Solution::SetContents( mm, nn, cntnts ); }


inline
Solution::~Solution( void )
{}


inline
Int_T Solution::GetN( void )
	const
{ return n; }


inline
Int_T Solution::GetM( void )
	const
{ return m; }


inline
Int_T Solution::GetAllocN( void )
	const
{ return maxN; }


inline
Int_T Solution::GetAllocM( void )
	const
{ return maxM; }


inline
void Solution::IncrementN( void )
{ SetN( Int_T( n + 1 ) ); }


inline
void Solution::IncrementM( void )
{ SetM( Int_T( m + 1 ) ); }


inline
int Solution::GetContents( void )
	const
{ return contents; }


inline
void Solution::SetStatus( Solution::SolutionStatus st )
{ status = st; }


inline
Solution::SolutionStatus Solution::GetStatus( void )
	const
{ return status; }


#endif
